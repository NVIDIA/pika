// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/notify/interface.go

// Package notify is a generated GoMock package.
package notify

import (
	reflect "reflect"

	v1alpha1 "github.com/NVIDIA/pika/api/v1alpha1"
	gomock "github.com/golang/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// GetNotifierName mocks base method.
func (m *MockNotifier) GetNotifierName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifierName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNotifierName indicates an expected call of GetNotifierName.
func (mr *MockNotifierMockRecorder) GetNotifierName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifierName", reflect.TypeOf((*MockNotifier)(nil).GetNotifierName))
}

// NotifyMaintenanceCancellation mocks base method.
func (m *MockNotifier) NotifyMaintenanceCancellation(arg0 client.Object, arg1 v1alpha1.NotifyMaintenance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyMaintenanceCancellation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyMaintenanceCancellation indicates an expected call of NotifyMaintenanceCancellation.
func (mr *MockNotifierMockRecorder) NotifyMaintenanceCancellation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyMaintenanceCancellation", reflect.TypeOf((*MockNotifier)(nil).NotifyMaintenanceCancellation), arg0, arg1)
}

// NotifyMaintenanceCompleted mocks base method.
func (m *MockNotifier) NotifyMaintenanceCompleted(arg0 client.Object, arg1 v1alpha1.NotifyMaintenance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyMaintenanceCompleted", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyMaintenanceCompleted indicates an expected call of NotifyMaintenanceCompleted.
func (mr *MockNotifierMockRecorder) NotifyMaintenanceCompleted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyMaintenanceCompleted", reflect.TypeOf((*MockNotifier)(nil).NotifyMaintenanceCompleted), arg0, arg1)
}

// NotifyMaintenanceEnded mocks base method.
func (m *MockNotifier) NotifyMaintenanceEnded(arg0 client.Object, arg1 v1alpha1.NotifyMaintenance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyMaintenanceEnded", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyMaintenanceEnded indicates an expected call of NotifyMaintenanceEnded.
func (mr *MockNotifierMockRecorder) NotifyMaintenanceEnded(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyMaintenanceEnded", reflect.TypeOf((*MockNotifier)(nil).NotifyMaintenanceEnded), arg0, arg1)
}

// NotifyMaintenanceIncomplete mocks base method.
func (m *MockNotifier) NotifyMaintenanceIncomplete(arg0 client.Object, arg1 v1alpha1.NotifyMaintenance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyMaintenanceIncomplete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyMaintenanceIncomplete indicates an expected call of NotifyMaintenanceIncomplete.
func (mr *MockNotifierMockRecorder) NotifyMaintenanceIncomplete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyMaintenanceIncomplete", reflect.TypeOf((*MockNotifier)(nil).NotifyMaintenanceIncomplete), arg0, arg1)
}

// NotifyNodeDrain mocks base method.
func (m *MockNotifier) NotifyNodeDrain(arg0 client.Object, arg1 v1alpha1.NotifyMaintenance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyNodeDrain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyNodeDrain indicates an expected call of NotifyNodeDrain.
func (mr *MockNotifierMockRecorder) NotifyNodeDrain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyNodeDrain", reflect.TypeOf((*MockNotifier)(nil).NotifyNodeDrain), arg0, arg1)
}

// NotifySLAExpire mocks base method.
func (m *MockNotifier) NotifySLAExpire(arg0 client.Object, arg1 v1alpha1.NotifyMaintenance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifySLAExpire", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifySLAExpire indicates an expected call of NotifySLAExpire.
func (mr *MockNotifierMockRecorder) NotifySLAExpire(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifySLAExpire", reflect.TypeOf((*MockNotifier)(nil).NotifySLAExpire), arg0, arg1)
}

// NotifySLAStart mocks base method.
func (m *MockNotifier) NotifySLAStart(arg0 client.Object, arg1 v1alpha1.NotifyMaintenance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifySLAStart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifySLAStart indicates an expected call of NotifySLAStart.
func (mr *MockNotifierMockRecorder) NotifySLAStart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifySLAStart", reflect.TypeOf((*MockNotifier)(nil).NotifySLAStart), arg0, arg1)
}

// NotifyValidating mocks base method.
func (m *MockNotifier) NotifyValidating(arg0 client.Object, arg1 v1alpha1.NotifyMaintenance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyValidating", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyValidating indicates an expected call of NotifyValidating.
func (mr *MockNotifierMockRecorder) NotifyValidating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyValidating", reflect.TypeOf((*MockNotifier)(nil).NotifyValidating), arg0, arg1)
}

// RotateCert mocks base method.
func (m *MockNotifier) RotateCert() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateCert")
	ret0, _ := ret[0].(error)
	return ret0
}

// RotateCert indicates an expected call of RotateCert.
func (mr *MockNotifierMockRecorder) RotateCert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateCert", reflect.TypeOf((*MockNotifier)(nil).RotateCert))
}
