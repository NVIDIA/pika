// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/notify/sns/client.go

// Package sns is a generated GoMock package.
package sns

import (
	reflect "reflect"

	sns "github.com/aws/aws-sdk-go/service/sns"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateTopic mocks base method.
func (m *MockClient) CreateTopic(input *sns.CreateTopicInput) (*sns.CreateTopicOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", input)
	ret0, _ := ret[0].(*sns.CreateTopicOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockClientMockRecorder) CreateTopic(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockClient)(nil).CreateTopic), input)
}

// Lookup mocks base method.
func (m *MockClient) Lookup(topic string) (*sns.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", topic)
	ret0, _ := ret[0].(*sns.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockClientMockRecorder) Lookup(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockClient)(nil).Lookup), topic)
}

// Publish mocks base method.
func (m *MockClient) Publish(input *sns.PublishInput) (*sns.PublishOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", input)
	ret0, _ := ret[0].(*sns.PublishOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockClientMockRecorder) Publish(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockClient)(nil).Publish), input)
}

// MockclientInterface is a mock of clientInterface interface.
type MockclientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockclientInterfaceMockRecorder
}

// MockclientInterfaceMockRecorder is the mock recorder for MockclientInterface.
type MockclientInterfaceMockRecorder struct {
	mock *MockclientInterface
}

// NewMockclientInterface creates a new mock instance.
func NewMockclientInterface(ctrl *gomock.Controller) *MockclientInterface {
	mock := &MockclientInterface{ctrl: ctrl}
	mock.recorder = &MockclientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientInterface) EXPECT() *MockclientInterfaceMockRecorder {
	return m.recorder
}

// CreateTopic mocks base method.
func (m *MockclientInterface) CreateTopic(input *sns.CreateTopicInput) (*sns.CreateTopicOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", input)
	ret0, _ := ret[0].(*sns.CreateTopicOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockclientInterfaceMockRecorder) CreateTopic(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockclientInterface)(nil).CreateTopic), input)
}

// GetTopicAttributes mocks base method.
func (m *MockclientInterface) GetTopicAttributes(input *sns.GetTopicAttributesInput) (*sns.GetTopicAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicAttributes", input)
	ret0, _ := ret[0].(*sns.GetTopicAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicAttributes indicates an expected call of GetTopicAttributes.
func (mr *MockclientInterfaceMockRecorder) GetTopicAttributes(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicAttributes", reflect.TypeOf((*MockclientInterface)(nil).GetTopicAttributes), input)
}

// ListTopics mocks base method.
func (m *MockclientInterface) ListTopics(input *sns.ListTopicsInput) (*sns.ListTopicsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopics", input)
	ret0, _ := ret[0].(*sns.ListTopicsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopics indicates an expected call of ListTopics.
func (mr *MockclientInterfaceMockRecorder) ListTopics(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopics", reflect.TypeOf((*MockclientInterface)(nil).ListTopics), input)
}

// Publish mocks base method.
func (m *MockclientInterface) Publish(input *sns.PublishInput) (*sns.PublishOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", input)
	ret0, _ := ret[0].(*sns.PublishOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockclientInterfaceMockRecorder) Publish(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockclientInterface)(nil).Publish), input)
}
